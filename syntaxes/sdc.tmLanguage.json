{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Synopsys (Xilinx) Design Constraints",
	"fileTypes": ["sdc", "xdc"],
	"scopeName": "source.sdc",
	"pattern-notes": {
		"command-name": "(?>\\\\[^\n]|[^;\\]\\}\\s\\\\])++",
		"command-name-end": "[;\\]\\}\\s]|\\\\\n|$",
		"command-end": "[;\\]\\}\n]",
		"argument-start": "[^;\\)\\]\\}\\s]",
		"argument-end": "[;\\)\\]\\}\\s]|\\\\\n|$",
		"numeric": "(?>\\d++\\.?+\\d*+|\\.\\d++)",
		"units": "(?>fs|ps|ns|us|ms|MHz)",
		"operators": "[\\+\\-\\*\\/\\%\\&\\|\\^\\~\\!\\=\\<\\>\\?\\:]",
		"operator-end": "(?![a-zA-Z_])",
		"constants": "(?>true|false)",
		"math-functions": "(?>abs|acos|asin|atan2?+|bool|ceil|cosh?+|double|entier|exp|floor|fmod|hypot|int|isqrt|log(?>10)?+|max|min|pow|rand|round|sinh?+|sqrt|srand|tanh?+|wide)"
	},
	"patterns": [
		{ "include": "#command-line" }
	],
	"repository": {
		"command-line": {
			"patterns": [
				{ "include": "#escape-newline" },
				{ "include": "#semicolon" },
				{ "include": "#comment" },
				{ "include": "#commands" }
			]
		},
		"semicolon": {
			"name": "punctuation.terminator.sdc",
			"match": ";"
		},
		"comment": {
			"name": "comment.line.number-sign.sdc",
			"begin": "\\#",
			"beginCaptures": {
				"0": { "name": "punctuation.definition.comment.sdc" }
			},
			"end": "\n",
			"patterns": [
				{ "include": "#escape-newline" }
			]
		},
		"commands": {
			"patterns": [
				{ "include": "#tcl-commands" },
				{ "include": "#special-commands" },
				{ "include": "#expression-commands" },
				{ "include": "#other-commands" },
				{ "include": "#invalid-commands" }
			]
		},
		"tcl-commands": {
			"patterns": [
				{
					"begin": "((?>\\:\\:++)?+proc)(?>\\s++((?>\\\\[^\n]|[^;\\]\\}\\s\\\\])++)|(?=[;\\]\\}\\s]|\\\\\n|$))",
					"beginCaptures": {
						"1": { "name": "storage.type.function.sdc" },
						"2": { "name": "entity.name.function.sdc" }
					},
					"end": "(?=[;\\]\\}\n])",
					"patterns": [
						{ "include": "#escape-newline" },
						{ "include": "#function-definition" }
					]
				},
				{
					"begin": "(?>\\:\\:++)?+foreach(?>_in_collection)?+(?=[;\\]\\}\\s]|\\\\\n|$)",
					"beginCaptures": {
						"0": { "name": "keyword.control.sdc" }
					},
					"end": "(?=[;\\]\\}\n])",
					"patterns": [
						{ "include": "#escape-newline" },
						{ "include": "#function-definition" }
					]
				},
				{
					"begin": "(?>\\:\\:++)?+if(?=[;\\]\\}\\s]|\\\\\n|$)",
					"beginCaptures": {
						"0": { "name": "keyword.control.sdc" }
					},
					"end": "(?=[;\\]\\}\n])",
					"patterns": [
						{ "include": "#then-else" },
						{ "include": "#control-arguments" }
					]
				},
				{
					"begin": "(?>\\:\\:++)?+(?>catch|for|switch|while)(?=[;\\]\\}\\s]|\\\\\n|$)",
					"beginCaptures": {
						"0": { "name": "keyword.control.sdc" }
					},
					"end": "(?=[;\\]\\}\n])",
					"patterns": [
						{ "include": "#control-arguments" }
					]
				},
				{
					"begin": "(?>\\:\\:++)?+(?>after|break|continue|error|exit|return|update|vwait)(?=[;\\]\\}\\s]|\\\\\n|$)",
					"beginCaptures": {
						"0": { "name": "keyword.control.sdc" }
					},
					"end": "(?=[;\\]\\}\n])",
					"patterns": [
						{ "include": "#normal-arguments" }
					]
				},
				{
					"begin": "(?>\\:\\:++)?+(?>expr|time|uplevel)(?=[;\\]\\}\\s]|\\\\\n|$)",
					"beginCaptures": {
						"0": { "name": "keyword.other.sdc" }
					},
					"end": "(?=[;\\]\\}\n])",
					"patterns": [
						{ "include": "#control-arguments" }
					]
				},
				{
					"begin": "(?>\\:\\:++)?+(?>eval)(?=[;\\]\\}\\s]|\\\\\n|$)",
					"beginCaptures": {
						"0": { "name": "keyword.other.sdc" }
					},
					"end": "(?=[;\\]\\}\n])",
					"patterns": [
						{ "include": "#eval-arguments" }
					]
				},
				{
					"begin": "((?>\\:\\:++)?+namespace)\\s++(eval)(?>\\s++((?>\\\\[^\n]|[^;\\]\\}\\s\\\\])++)|(?=[;\\]\\}\\s]|\\\\\n|$))",
					"beginCaptures": {
						"1": { "name": "storage.type.namespace.sdc" },
						"2": { "name": "keyword.other.sdc" },
						"3": { "name": "entity.name.namespace.sdc" }
					},
					"end": "(?=[;\\]\\}\n])",
					"patterns": [
						{ "include": "#eval-arguments" }
					]
				},
				{
					"begin": "(?>\\:\\:++)?+(?>append|apply|array|auto_(?>execok|import|load|mkindex(?>_old)?+|qualify|reset)|bgerror|binary|cd|chan|clock|close|concat|dde|dict|encoding|eof|exec|fblocked|fconfigure|fcopy|file(?>event)?+|flush|format|gets|glob|global|history|incr|info|interp|join|lappend|lassign|lindex|linsert|list|llength|load|lrange|lrepeat|lreplace|lreverse|lsearch|lset|lsort|memory|namespace|open|package|parray|pid|pkg\\:\\:++create|pkg_mkIndex|puts|pwd|read|regexp|registry|regsub|rename|scan|seek|set|socket|source|split|string|subst|tcl_(?>endOfWord|findLibrary|startOfNextWord|startOfPreviousWord|wordBreakAfter|wordBreakBefore)|tell|trace|unknown|unload|unset|upvar|variable)(?=[;\\]\\}\\s]|\\\\\n|$)",
					"beginCaptures": {
						"0": { "name": "keyword.other.sdc" }
					},
					"end": "(?=[;\\]\\}\n])",
					"patterns": [
						{ "include": "#normal-arguments" }
					]
				},
				{
					"begin": "(?>\\:\\:++)?+(?>http|msgcat|platform(?>\\:\\:++shell)?+|safe|tcltest|tcl\\:\\:++tm)(?>\\:\\:++[a-zA-Z]\\w*+)(?=[;\\]\\}\\s]|\\\\\n|$)",
					"beginCaptures": {
						"0": { "name": "keyword.other.sdc" }
					},
					"end": "(?=[;\\]\\}\n])",
					"patterns": [
						{ "include": "#normal-arguments" }
					]
				}
			]
		},
		"special-commands": {
			"begin": "(?=[\\$\\[\\{\"])",
			"end": "(?=[;\\]\\}\n])",
			"patterns": [
				{ "include": "#normal-arguments" }
			]
		},
		"expression-commands": {
			"patterns": [
				{
					"begin": "(?=(?>abs|acos|asin|atan2?+|bool|ceil|cosh?+|double|entier|exp|floor|fmod|hypot|int|isqrt|log(?>10)?+|max|min|pow|rand|round|sinh?+|sqrt|srand|tanh?+|wide)?+\\()",
					"end": "(?=[;\\]\\}\n])",
					"patterns": [
						{ "include": "#expression-arguments" }
					]
				},
				{
					"begin": "(?=(?>\\d++\\.?+\\d*+|\\.\\d++)(?>fs|ps|ns|us|ms|MHz)?+(?>[\\+\\-\\*\\/\\%\\&\\|\\^\\~\\!\\=\\<\\>\\?\\:]|[;\\)\\]\\}\\s]|\\\\\n|$))",
					"end": "(?=[;\\]\\}\n])",
					"patterns": [
						{ "include": "#expression-arguments" }
					]
				},
				{
					"begin": "(?=[\\+\\-\\*\\/\\%\\&\\|\\^\\~\\!\\=\\<\\>\\?\\:]++(?![a-zA-Z_]))",
					"end": "(?=[;\\]\\}\n])",
					"patterns": [
						{ "include": "#expression-arguments" }
					]
				},
				{
					"begin": "(?=(?>true|false)(?>[;\\)\\]\\}\\s]|\\\\\n|$))",
					"end": "(?=[;\\]\\}\n])",
					"patterns": [
						{ "include": "#expression-arguments" }
					]
				}
			]
		},
		"other-commands": {
			"begin": "(?>\\\\[^\n]|[^;\\]\\}\\s\\\\])++",
			"beginCaptures": {
				"0": { "name": "entity.name.function.sdc" }
			},
			"end": "(?=[;\\]\\}\n])",
			"patterns": [
				{ "include": "#normal-arguments" }
			]
		},
		"invalid-commands": {
			"name": "invalid.illegal.brackets.end.sdc",
			"match": "[\\]\\}]"
		},
		"function-definition": {
			"begin": "(?>(\\{)((?>\\\\.|[^\\{\\}])*+(?>\\{\\g<2>\\}?+\\g<2>)?+)(\\})?+|((?>\\\\[^\n]|[^;\\]\\}\\s\\\\])++))",
			"beginCaptures": {
				"1": { "name": "punctuation.definition.parameters.begin.sdc" },
				"2": { "name": "variable.parameter.sdc" },
				"3": { "name": "punctuation.definition.parameters.end.sdc" },
				"4": { "name": "variable.parameter.sdc" }
			},
			"end": "(?=[;\\]\\}\n])",
			"patterns": [
				{ "include": "#control-arguments" }
			]
		},
		"common-arguments": {
			"patterns": [
				{ "include": "#escape-newline" },
				{ "include": "#brackets" },
				{ "include": "#quotes" },
				{ "include": "#expression" },
				{ "include": "#numeric" },
				{ "include": "#operators" },
				{ "include": "#constants" },
				{ "include": "#invalid-comment" },
				{ "include": "#other-argument" }
			]
		},
		"expression-arguments": {
			"patterns": [
				{ "include": "#braces" },
				{ "include": "#common-arguments" }
			]
		},
		"normal-arguments": {
			"patterns": [
				{ "include": "#command-option" },
				{ "include": "#expression-arguments" }
			]
		},
		"control-arguments": {
			"patterns": [
				{ "include": "#control-braces" },
				{ "include": "#command-option" },
				{ "include": "#common-arguments" }
			]
		},
		"eval-arguments": {
			"patterns": [
				{ "include": "#escape-newline" },
				{ "include": "#control-braces" },
				{ "include": "#commands" }
			]
		},
		"embedded-elemnts": {
			"patterns": [
				{ "include": "#escape-character" },
				{ "include": "#brackets" },
				{ "include": "#variable" },
				{ "include": "#embedded-numeric" },
				{ "include": "#embedded-operators" }
			]
		},
		"braces": {
			"name": "meta.embedded.braces.sdc",
			"contentName": "string.quoted.raw.sdc",
			"begin": "\\{",
			"beginCaptures": {
				"0": { "name": "punctuation.section.braces.begin.sdc" }
			},
			"end": "\\}",
			"endCaptures": {
				"0": { "name": "punctuation.section.braces.end.sdc" }
			},
			"patterns": [
				{ "include": "#escape-newline" },
				{ "include": "#escape-character" },
				{ "include": "#braces" },
				{ "include": "#embedded-numeric" },
				{ "include": "#embedded-operators" }
			]
		},
		"control-braces": {
			"name": "meta.embedded.block.sdc",
			"begin": "\\{",
			"beginCaptures": {
				"0": { "name": "punctuation.section.block.begin.sdc" }
			},
			"end": "\\}",
			"endCaptures": {
				"0": { "name": "punctuation.section.block.end.sdc" }
			},
			"patterns": [
				{ "include": "#command-line" }
			]
		},
		"brackets": {
			"name": "meta.embedded.brackets.sdc",
			"begin": "\\[",
			"beginCaptures": {
				"0": { "name": "punctuation.section.brackets.begin.sdc" }
			},
			"end": "\\]",
			"endCaptures": {
				"0": { "name": "punctuation.section.brackets.end.sdc" }
			},
			"patterns": [
				{ "include": "#command-line" }
			]
		},
		"quotes": {
			"name": "string.quoted.double.sdc",
			"begin": "\"",
			"beginCaptures": {
				"0": { "name": "punctuation.definition.string.begin.sdc" }
			},
			"end": "\"",
			"endCaptures": {
				"0": { "name": "punctuation.definition.string.end.sdc" }
			},
			"patterns": [
				{ "include": "#escape-newline" },
				{ "include": "#embedded-elemnts" }
			]
		},
		"variable": {
			"patterns": [
				{
					"name": "variable.other.sdc",
					"begin": "(\\$)(?>[a-zA-Z0-9_]|\\:\\:++)*+(\\()",
					"beginCaptures": {
						"1": { "name": "punctuation.definition.variable.sdc" },
						"2": { "name": "punctuation.definition.variable.parens.begin.sdc" }
					},
					"end": "\\)",
					"endCaptures": {
						"0": { "name": "punctuation.definition.variable.parens.end.sdc" }
					},
					"patterns": [
						{ "include": "#escape-newline" },
						{ "include": "#embedded-elemnts" }
					]
				},
				{
					"name": "variable.other.sdc",
					"begin": "(\\$)(\\{)",
					"beginCaptures": {
						"1": { "name": "punctuation.definition.variable.sdc" },
						"2": { "name": "punctuation.definition.variable.braces.begin.sdc" }
					},
					"end": "\\}",
					"endCaptures": {
						"0": { "name": "punctuation.definition.variable.braces.end.sdc" }
					}
				},
				{
					"name": "variable.other.sdc",
					"match": "(\\$)(?>[a-zA-Z0-9_]|\\:\\:++)*+",
					"captures": {
						"1": { "name": "punctuation.definition.variable.sdc" }
					}
				}
			]
		},
		"expression": {
			"begin": "((?>abs|acos|asin|atan2?+|bool|ceil|cosh?+|double|entier|exp|floor|fmod|hypot|int|isqrt|log(?>10)?+|max|min|pow|rand|round|sinh?+|sqrt|srand|tanh?+|wide))?+(\\()",
			"beginCaptures": {
				"1": { "name": "support.function.sdc" },
				"2": { "name": "punctuation.section.group.begin.sdc" }
			},
			"end": "\\)",
			"endCaptures": {
				"0": { "name": "punctuation.section.group.end.sdc" }
			},
			"patterns": [
				{ "include": "#expression-arguments" }
			]
		},
		"numeric": {
			"match": "((?>\\d++\\.?+\\d*+|\\.\\d++))((?>fs|ps|ns|us|ms|MHz))?+(?=[\\+\\-\\*\\/\\%\\&\\|\\^\\~\\!\\=\\<\\>\\?\\:]|[;\\)\\]\\}\\s]|\\\\\n|$)",
			"captures": {
				"1": { "name": "constant.numeric.sdc" },
				"2": { "name": "constant.other.sdc" }
			}
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.sdc",
					"match": "[\\+\\-\\*\\/\\%\\&\\|\\^\\~\\!\\=\\<\\>\\?\\:]++(?![a-zA-Z_])"
				},
				{
					"name": "keyword.operator.word.sdc",
					"match": "(?>eq|ne|in|ni)(?=[;\\)\\]\\}\\s]|\\\\\n|$)"
				}
			]
		},
		"constants": {
			"name": "constant.language.sdc",
			"match": "(?>true|false)(?=[;\\)\\]\\}\\s]|\\\\\n|$)"
		},
		"command-option": {
			"name": "storage.type.command-option.sdc",
			"match": "\\-[a-zA-Z_][a-zA-Z0-9_]*+(?=[;\\]\\}\\s]|\\\\\n|$)"
		},
		"then-else": {
			"name": "keyword.control.sdc",
			"match": "(?>then|else(?>if)?+)(?=[;\\]\\}\\s]|\\\\\n|$)"
		},
		"invalid-comment": {
			"begin": "\\#",
			"beginCaptures": {
				"0": { "name": "invalid.illegal.number-sign.sdc" }
			},
			"end": "(?=[;\\)\\]\\}\\s]|\\\\\n|$)",
			"patterns": [
				{ "include": "#embedded-elemnts" }
			]
		},
		"other-argument": {
			"begin": "(?=[^;\\)\\]\\}\\s])",
			"end": "(?=[;\\)\\]\\}\\s]|\\\\\n|$)",
			"patterns": [
				{ "include": "#embedded-elemnts" }
			]
		},
		"embedded-numeric": {
			"match": "(?<=^|[\\(\\[\\{\\s])([\\+\\-])?+((?>\\d++\\.?+\\d*+|\\.\\d++))((?>fs|ps|ns|us|ms|MHz))?+(?=\\\\[\\)\\]\\}]|[;\\)\\]\\}\\s]|\\\\\n|$)",
			"captures": {
				"1": { "name": "keyword.operator.sign.sdc" },
				"2": { "name": "constant.numeric.sdc" },
				"3": { "name": "constant.other.sdc" }
			}
		},
		"embedded-operators": {
			"patterns": [
				{
					"name": "keyword.operator.embedded.sdc",
					"match": "(?>\\=[\\=\\~]|\\![\\=\\~]?+|\\<\\=?+|\\>\\=?+|\\&\\&|\\|\\||[\\*\\?])"
				},
				{
					"name": "punctuation.separator.hierarchy.sdc",
					"match": "[\\/\\|\\.\\~\\:]"
				}
			]
		},
		"escape-newline": {
			"name": "constant.character.escape.sdc",
			"match": "\\\\[\\\\\n]"
		},
		"escape-character": {
			"name": "constant.character.escape.sdc",
			"match": "\\\\(?>[0-3]?[0-7]{1,2}|x[a-fA-F0-9]{1,2}|u[a-fA-F0-9]{1,4}|[^\n])"
		}
	}
}