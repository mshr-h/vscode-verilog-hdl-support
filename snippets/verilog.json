{
	"module with parameters": {
		"prefix": ["paramod", "module #"],
		"body": [
			"module ${1:moduleName} #(",
			"\t${2:parameters}",
			") (",
			"\t${3:ports}",
			");",
			"\t$0",
			"endmodule"
		],
		"description": "Insert a module with parameter"
	},
	"module without parameters": {
		"prefix": "module",
		"body": [
			"module ${1:moduleName} (",
			"\t${2:ports}",
			");",
			"\t$0",
			"endmodule"
		],
		"description": "Insert a module without parameter"
	},
	"instantiate module": {
		"prefix": ["set module", "instantiate module"],
		"body": [
			"${1:mod_name} ${2:instance_name} (${3:.*}$0);"
		],
		"description": "set module, mod i0 (.*);"
	},
	"always": {
		"prefix": ["al", "always"],
		"body": [
			"always @($1) begin",
			"\t$2",
			"end"
		],
		"description": "Insert an always block"
	},
	"alwaysposclk": {
		"prefix": ["alclk", "alwaysposclk"],
		"body": [
			"always @(posedge clk $1) begin",
			"\t$2",
			"end"
		],
		"description": "always @(posedge clk)"
	},
	"alwaysnegclk": {
		"prefix": ["alnegclk", "alwaysnegclk"],
		"body": [
			"always @(negedge clk $1) begin",
			"\t$2",
			"end"
		],
		"description": "always @(negedge clk)"
	},
	"begin/end": {
		"prefix": "begin",
		"body": [
			"begin",
			"\t$1",
			"end"
		],
		"description": "Insert a begin ... end block"
	},
	"end": {
		"prefix": "end",
		"body": "end",
		"description": "Insert end keyword"
	},
	"initial": {
		"prefix": "initial",
		"body": [
			"initial begin",
			"\t$0",
			"end"
		],
		"description": "initial begin ... end"
	},
	"case": {
		"prefix": "case",
		"body": [
			"case (${1:param})",
			"\t$2: $3",
			"\tdefault: $4",
			"endcase"
		],
		"description": "case () ... endcase"
	},
	"casex": {
		"prefix": "casex",
		"body": [
			"casex (${1:param})",
			"\t$2: $3",
			"\tdefault: $4",
			"endcase"
		],
		"description": "casex () ... endcase"
	},
	"casez": {
		"prefix": "casez",
		"body": [
			"casez (${1:param})",
			"\t$2: $3",
			"\tdefault: $4",
			"endcase"
		],
		"description": "casez () ... endcase"
	},
	"reg": {
		"prefix": "reg",
		"body": [
			"reg $1;"
		],
		"description": "reg reg_name;"
	},
	"regarray": {
		"prefix": ["regarray", "reg ["],
		"body": [
			"reg [$1:$2] $3;"
		],
		"description": "reg [N:0] reg_name;"
	},
	"regmemory": {
		"prefix": ["regmemory","memory"],
		"body": [
			"reg [$1:$2] $3 [$4:$5];"
		],
		"description": "reg [N:0] reg_name [0:M];"
	},
	"wire": {
		"prefix": "wire",
		"body": [
			"wire $1;"
		],
		"description": "wire wire_name;"
	},
	"wirearray": {
		"prefix": ["wirearray", "wire ["],
		"body": [
			"wire [$1:$2] $3;"
		],
		"description": "wire [N:0] wire_name;"
	},
	"array": {
		"prefix": "array",
		"body": "[${1:8}:${2:0}]$0",
		"description": "insert [x:y]"
	},
	"parameter": {
		"prefix": "parameter",
		"body": [
			"parameter $1 = $2;"
		],
		"description": "paramter var = val;"
	},
	"localparam": {
		"prefix": "localparam",
		"body": "localparam $1 = $2;",
		"description": "localparam var = val"
	},
	"integer": {
		"prefix": "integer",
		"body": "integer $1;",
		"description": "integer int_name"
	},
	"signed": {
		"prefix": "signed",
		"body": "signed $1 $2;",
		"description": "signed datatype name"
	},
	"include": {
		"prefix": ["include", "`include"],
		"body": [
			"`include \"$1\""
		],
		"description": "`include \"..\""
	},
	"define": {
		"prefix": ["def", "define", "`define"],
		"body": [
			"`define ${1:macro}"
		],
		"description": "`define macro"
	},
	"ifdef": {
		"prefix": ["ifdef", "`ifdef"],
		"body": "`ifdef ${1:macro}",
		"description": "`ifdef macro"
	},
	"ifndef": {
		"prefix": ["ifndef", "`ifndef"],
		"body": "`ifndef ${1:macro}",
		"description": "`ifndef macro"
	},
	"elsif": {
		"prefix": ["elsif", "`elsif"],
		"body": "`elsif ${1:macro}",
		"description": "`elsif macro"
	},
	"endif": {
		"prefix": ["endif", "`endif"],
		"body": "`endif ${1:macro}",
		"description": "`endif macro"
	},
	"undef": {
		"prefix": ["undef", "`undef"],
		"body": "`undef ${1:macro}",
		"description": "`undef macro"
	},
	"timescale": {
		"prefix": ["ts", "timescale", "`timescale"],
		"body": [
			"`timescale ${1:1ps}/${2:1ps}$0"
		]
	},
	"default_nettype": {
		"prefix": ["default_nettype", "`default_nettype"],
		"body": "`default_nettype ${1:none}",
		"description": "Set default nettype"
	},
	"ternary": {
		"prefix": "ternary",
		"body": [
			"$1 ? $2 : $3"
		],
		"description": "a ? b : c"
	},
	"if": {
		"prefix": "if",
		"body": [
			"if (${1:conditions}) begin",
			"\t$0",
			"end"
		],
		"description": "if (...) begin ... end"
	},
	"ifelse": {
		"prefix": "ifelse",
		"body": [
			"if (${1:conditions}) begin",
			"\t$2",
			"end else begin",
			"\t$3",
			"end"
		],
		"description": "if (...) begin ... end else begin ... end"
	},
	"for loop": {
		"prefix": "for",
		"body": [
			"for ($1 = $2; $3; $4) begin",
			"\t$0",
			"end"
		],
		"description": "for (...) begin ... end"
	},
	"while loop": {
		"prefix": "while",
		"body": [
			"while ($1) begin",
			"\t$2",
			"end"
		],
		"description": "while (...) begin ... end"
	},
	"forever": {
		"prefix": "forever",
		"body": [
			"forever begin",
			"\t$0",
			"end"
		],
		"description": "forever begin ... end"
	},
	"function": {
		"prefix": "function",
		"body": [
			"function $1;",
			"\t$2;",
			"\t$3",
			"endfunction"
		],
		"description": "function (...) ... endfunction"
	},
	"generate": {
		"prefix": "generate",
		"body": [
			"generate",
			"\t$1",
			"endgenerate"
		],
		"description": "generate (...) ... endgenerate"
	},
	"genvar": {
		"prefix": "genvar",
		"body": "genvar $1",
		"description": "genvar i"
	},
	"testbench template": {
		"prefix": ["tb", "testbench"],
		"body": [
			"`include \"$1.v\"",
			"`default_nettype none",
			"",
			"module tb_$1;",
			"reg clk;",
			"reg rst_n;",
			"",
			"$1 $3",
			"(",
			"\t.rst_n (rst_n),",
			"\t.clk (clk),",
			");",
			"",
			"localparam CLK_PERIOD = 10;",
			"always #(CLK_PERIOD/2) clk=~clk;",
			"",
			"initial begin",
			"\t\\$dumpfile(\"tb_$1.vcd\");",
			"\t\\$dumpvars(0, tb_$1);",
			"end",
			"",
			"initial begin",
			"\t#1 rst_n<=1'bx;clk<=1'bx;",
			"\t#(CLK_PERIOD*3) rst_n<=1;",
			"\t#(CLK_PERIOD*3) rst_n<=0;clk<=0;",
			"\trepeat(5) @(posedge clk);",
			"\trst_n<=1;",
			"\t@(posedge clk);",
			"\trepeat(2) @(posedge clk);",
			"\t\\$finish(2);",
			"end",
			"",
			"endmodule",
			"`default_nettype wire"
		],
		"description": "testbench template"
	}
}